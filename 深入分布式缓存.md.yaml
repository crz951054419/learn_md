#1.一致性算法 
Paxos,Raft,2PC,3PC Lease机制，
Quorum,MVCC主要解决分布式存储的一致性问题，Gossip是一种去中心化、容错而又最终一致性的算法

#2.PAXOS
	两阶段协议，分为Prepare阶段和Accept阶段
	参与者角色:
			1.Proposer是提议提案的服务器
			2.Acceptor是批准提案的服务器

	Prepare阶段
		1.Proposer发送prepare
		生成全部唯一且递增的提案id，像paxos集群的所有机器发送请求，提案id叫做Pn
		2.Accrptor应答Prepare
			Acceptor收到提案请求后，做出一下约定		
				1).不再应答<=Pn的Prepare请求
				2).对于<Pn的Accept请求不处理
			做的处理包括
				1).应答前要在本地持久话当前提案id
				2).如果现在请求的提案Id-pn大于之前存放的proposalId,则作出一下逻辑
				If Pb>proposalId then proposalId=Pn
	Accept阶段
		1.Proposer发送Accept
			Proposer收集到多数应答(超过n/2+1)Prepare阶段，从中选择proposalID最大的提案内容
			,作为要发起Accrpt的提案，如果这个提案委孔，则可以自己决定提案的内容。然后携带上当前proposalId，向Paxos集群的所有机器发送Accept请求
		2.Acceptor应答Accept
			Acceptor收到Accrpt请求后，检查不违背约定的情况下，持久话当前proposalId和提案内容。最后proposer收集到多数派应答的Accrpt恢复后，形成决议	

#3.2PC
	2阶段提交协议是一种典型的原子提交协议
	包括两个阶段
	1).提交请求阶段
	2).提交阶段			
	2PC不足是提交协议是阻塞性协议。如果事务协调器宕机，某些参与者无法解决他们的事务
	原则
		1).能不用2PC尽量不用，
		2).要获得事务强一致性,也要在性能和一致性上折中，比如加上超时机制,阶段性补偿机制

#4.3PC		
	3阶段
	1).投票，事务协调器询问参与者是否能提交
	2).预提交
	3).doCommit

#5.Raft
	1.领导人
	2.选民
	3.候选人

#6.Lease机制
	Lease是由授权者授予分布式环境一段时间内的承诺.在授权的时间短内，放心使用，而Server也遵守承诺，在Lease过期时间内不修改数据
	过期时间到之后，节点会删除本地的数据，而此时Server会阻塞一直到已发布的所有Lease都已过期，再更新数据并发出新的Lease
	优化空间
		1).数据过期时，Server还未更新发布，读不到数据，影响业务。还是给读请求数据，但是没有Lease时间，下次来则继续到server请求，可能此时新的Lease已经生成好
		2).主动通知机制，如果Server的数据修改后，可以主动发起失效命令。如果所有都失效成功，则直接更新数据，颁发新的
		Lease。如果不完全成功，则可以重试或者退化为原始的等待方案
		3).锁定资源的角度，如果一次更新动作的数据是分离的，则没有必要对所有Lease等待过期

#7.解决”脑裂“问题
	脑裂(split-brain),指在一个高可用(HA)系统中，当联系的两个节点断开联系时，本来一个整体的系统，分裂为两个独立节点，这时两个节点开始争抢共享资源。
	主备切换时，存在不确定时。Slave提供服务了，但此时Master又复活了，又开始继续工作
	resolve
		1.仲裁机制
			设置第三方检测服务器。当slave接管master时，让Monitor也ping一下Master，如果没有通讯，判断其死亡。同时Master在对外提供服务时，每隔一段时间向Master服务器ping Slave和Monitor，如果出现异常，则暂停业务操作，充值
	保证Monitor的高可用
		通过Lease机制可以处理双主脑裂问题						   
		我们假设Slave已经在提供服务，对应的Server服务器则获取Slave颁发的Lease。假设老Master仍在提供服务，则lease必然时过期的，因此请求失效，老Master请求频繁时效情况下，可以通过配置监控点触发报警，人工介入让老Master转换成Slave

#8.Quorum NWR
	1.N:同一份数据的拷贝分数
	2.W:是更新一个数据对象的时候需要确保成功更新的份数
	3.R:读取一个数据需要读取拷贝的份数

	 W>N/2 W+R>N
	 写操作要确保成功的份数应该高于同一份数据拷贝总份数的一半;同时，写操作加上读操作的总份数也要高于同一份数据拷贝总份数
	
	|N      | W   | R   |说明  |
	| -----|----: |---: |:----:|
	|1      |     |     | N=1，单点问题|	 
	|2      |     |     | 单节点挂了之后，仍然是单点|
	|3      | 2,3 | 1,2,3| 读越大，读性能越差;写越大，写性能|
	|4或者更多|    |       |    成本高 |  

	TFS(TAOBAO FILE SYSTEM) 采用N=3,W=3，为了取得写性能与高可用之间的平衡,在某个DataServer出现问题的时候，采取异步策略，由对应元数据管理机制启动恢复流程，选择继续写到成功为止
#9.mvcc
	基于锁的并发控制称为悲观机制，mvcc称为乐观机制
	Innodb实现

		* 给每张表增加两个字端，分别叫做create version和delete version
		* 插入操作时,记录创建版本号就是事务版本号
		* 更新操作时，采用的是先标记旧的那行记录为已删除，并且删除版本号是事务版本号，插入一行新纪录的方式
		* 删除操作时，就是把事务版本号作为删除版本号
		做查询操作时，符合两个条件的记录才能被事务查询出来
			1).delete version>当前版本号,删除操作时当前事务启动之后的
			2).create version<=当前事务版本号
		example	
			1)insert name为 'crz'的记录
			2)修改name为 'ccrz'，此时create version为2
			3)删除这条记录,在数据库引擎中的提现时insert新纪录，并设置delete version=3

			|id|name|create version|delete version|
			 1 |crz |    1         |              |
			 1 |crzz|    2         |              |
			 1 |crzz|    2         |     3        |

#10.Gossip
	问题
		1.其中每个节点如何快速得知集群状态
		2.避免多节点就某个专题产生分歧，
		是一种去中心化的分布式协议,解决状态在集群中的传播和状态一致性的保证两个问题。
	1.状态的传播
		A节点率先知道了某个流言(msg),他首先传播到集群中的部分节点(相邻)B和C，后者再将信息传给相邻的节点
		这个msg可能是
			1.某个节点感知到其他节点是否宕机
			2.数据水平拆分的缓存集群中，关于哪些hash桶分布在哪些节点上的信息




















